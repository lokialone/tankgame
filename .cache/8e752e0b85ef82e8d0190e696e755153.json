{"dependencies":[{"name":"./util.js","loc":{"line":1,"column":17}},{"name":"./img/heart.png","loc":{"line":327,"column":32}}],"generated":{"js":"\"use strict\";\n\nvar _util = require(\"./util.js\");\n\nvar _util2 = _interopRequireDefault(_util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Direction = {\n  UP: 0,\n  RIGHT: Math.PI / 2,\n  DOWN: Math.PI,\n  LEFT: Math.PI * 3 / 2\n};\n\nvar Bullet = function (x, y, direction) {\n  this.bulletSize = 4;\n  this.x = x;\n  this.y = y;\n  this.grap = 4;\n  this.direction = direction;\n  this.power = 1;\n  this.isLive = true;\n};\n\nBullet.prototype.render = function (p) {\n  p.rect(this.x - this.bulletSize / 2, this.y - this.bulletSize, this.bulletSize, this.bulletSize);\n};\n\nBullet.prototype.getX = function () {\n  return this.x;\n};\n\nBullet.prototype.init = function (x, y, direction) {\n  this.setLocation(x, y);\n  this.setDirection(direction);\n};\nBullet.prototype.setLocation = function (x, y) {\n  this.x = x;\n  this.y = y;\n};\n\nBullet.prototype.setDirection = function (direction) {\n  this.direction = direction;\n};\n\nBullet.prototype.update = function (p) {\n  switch (this.direction) {\n    case Direction.UP:\n      this.y -= this.grap;\n      break;\n    case Direction.DOWN:\n      this.y += this.grap;\n      break;\n    case Direction.RIGHT:\n      this.x += this.grap;\n      break;\n    case Direction.LEFT:\n      this.x -= this.grap;\n      break;\n    default:\n      this.x += this.grap;\n  }\n};\n\nBullet.prototype.checkEdges = function (edge_x, edge_y, x, y, direction) {\n  if (this.x >= edge_x || this.x <= 0 || this.y >= edge_y || this.y <= 0) {\n    this.init(x, y, direction);\n  }\n};\n\nBullet.prototype.checkShot = function (x, y, range, p) {\n  if (p.dist(this.x, this.y, x, y) <= range) {\n    return true;\n  }\n  return false;\n};\n\nvar Tank = function () {\n\n  this.tankWidth = 50;\n  this.tankHeight = 50;\n\n  this.gunturretWidth = 30;\n  this.gunturretHeight = 20;\n\n  this.cannonHeight = 30;\n  this.cannonDiameter = 6;\n\n  // tank的圆角\n  this.borderRadius = 5;\n  this.slotBulletFlag = true;\n  this.margin = 5;\n  // tank的重心坐标\n  this.x = 0;\n  this.y = 0;\n\n  this.direction = 0;\n  this.speed = 2;\n\n  this.bullets = [];\n  this.blood = 3;\n};\n\nTank.prototype.setLocation = function (x, y) {\n  this.x = x;\n  this.y = y;\n};\n\nTank.prototype.updateCenter = function (x, y) {\n  this.x = x;\n  this.y = y;\n};\n\nTank.prototype.rotate = function (deg) {\n  this.direction = deg;\n};\n\nTank.prototype.setDirection = function (direction) {\n  if (this.direction !== direction) {\n    this.rotate(direction);\n  }\n};\n\nTank.prototype.goLeft = function () {\n  this.setDirection(Direction.LEFT);\n  this.x -= this.speed;\n};\n\nTank.prototype.goRight = function () {\n  this.setDirection(Direction.RIGHT);\n  this.x += this.speed;\n};\n\nTank.prototype.goUp = function () {\n  this.setDirection(Direction.UP);\n  this.y -= this.speed;\n};\n\nTank.prototype.goDown = function () {\n  this.setDirection(Direction.DOWN);\n  this.y += this.speed;\n};\n\nTank.prototype.slotBullet = function () {\n  this.bullets.push(new Bullet(this.x, this.y, this.direction));\n};\n\nTank.prototype.checkCollision = function (x, y, p) {\n  if (p.dist(this.x, this.y, x, y) <= Math.sqrt(2 * this.tankWidth * this.tankWidth)) {\n    return true;\n  }\n  return false;\n};\n\nTank.prototype.render = function (p) {\n\n  // render bullets\n  for (var i = 0; i < this.bullets.length; i++) {\n    this.bullets[i].render(p);\n    this.bullets[i].update(p);\n  }\n\n  p.push();\n  // 坦克的body\n  p.translate(this.x, this.y);\n  p.rotate(this.direction);\n  p.fill(255, 204, 0);\n  p.rect(-this.tankWidth / 2, -this.tankHeight / 2, this.tankWidth, this.tankHeight, this.borderRadius);\n  //坦克的炮台\n  p.fill(153, 204, 0);\n  p.rect(-this.gunturretWidth / 2, -this.gunturretHeight / 2, this.gunturretWidth, this.gunturretHeight, this.borderRadius);\n  // 坦克的大炮\n  p.fill(255, 255, 255);\n  p.rect(-this.cannonDiameter / 2, -this.gunturretHeight / 2 - this.cannonHeight, this.cannonDiameter, this.cannonHeight);\n\n  p.pop();\n};\n\nvar EnemyTank = function (min, x_max, y_max) {\n  Tank.call(this);\n  this.edge_min = min;\n  this.edge_x_max = x_max;\n  this.edge_y_max = y_max;\n  this.speed = 1;\n  this.bullet = '';\n  this.bulletsDistance = 60;\n  this.bulletsCount = 5;\n  this.color = 'hsba(160, 100%, 50%, 0.5)';\n};\n\nEnemyTank.prototype = new Tank();\n\nEnemyTank.prototype.autoMove = function (p) {\n  this.render(p);\n  this.autoUpdate(p);\n};\n\nEnemyTank.prototype.autoUpdate = function (p) {\n  this.goForward();\n  if (this.isEdges()) {\n    this.findDirection();\n  }\n};\n\nEnemyTank.prototype.setLocationAndDirection = function (x, y, direction) {\n  this.setLocation(x, y);\n  this.setDirection(direction);\n};\n\nEnemyTank.prototype.createRandom = function (x, y) {\n  var dir = this.getRandomDirection();\n  this.setLocationAndDirection(x, y, dir);\n};\n\nEnemyTank.prototype.getRandomDirection = function () {\n  var dirs = [];\n  for (var key in Direction) {\n    dirs.push(key);\n  }\n  var i = Math.floor(_util2.default.randomRange(0, dirs.length));\n  return Direction[dirs[i]];\n};\n\nEnemyTank.prototype.isEdges = function () {\n  if (this.x <= this.edge_min || this.x >= this.edge_x_max || this.y <= this.edge_min || this.y >= this.edge_y_max) {\n    return true;\n  }\n  return false;\n};\n\nEnemyTank.prototype.render = function (p) {\n  // render bullets\n  for (var i = 0; i < this.bullets.length; i++) {\n    this.bullets[i].render(p);\n    this.bullets[i].update(p);\n  }\n\n  p.push();\n  // 坦克的body\n\n  p.fill(p.color(this.color));\n\n  p.translate(this.x, this.y);\n  p.rotate(this.direction);\n\n  p.rect(-this.tankWidth / 2, -this.tankHeight / 2, this.tankWidth, this.tankHeight, this.borderRadius);\n  //坦克的炮台\n\n  p.rect(-this.gunturretWidth / 2, -this.gunturretHeight / 2, this.gunturretWidth, this.gunturretHeight, this.borderRadius);\n  // 坦克的大炮\n  p.rect(-this.cannonDiameter / 2, -this.gunturretHeight / 2 - this.cannonHeight, this.cannonDiameter, this.cannonHeight);\n  p.pop();\n};\n\nEnemyTank.prototype.setColor = function (color) {\n  this.color = color;\n};\nEnemyTank.prototype.goForward = function (rate) {\n  if (arguments.length === 0) {\n    var rate = 1;\n  }\n\n  switch (this.direction) {\n    case Direction.UP:\n      this.y -= this.speed * rate;\n      break;\n    case Direction.DOWN:\n      this.y += this.speed * rate;\n      break;\n    case Direction.LEFT:\n      this.x -= this.speed * rate;\n      break;\n    case Direction.RIGHT:\n      this.x += this.speed * rate;\n      break;\n    default:\n      this.y += this.speed * rate;\n  }\n};\n\nEnemyTank.prototype.findDirection = function () {\n\n  for (var dir in Direction) {\n    if (this.direction === Direction[dir]) continue;\n    this.setDirection(Direction[dir]);\n    this.goForward();\n    if (!this.isEdges()) {\n      this.goForward(-1);\n      break;\n    }\n    this.goForward(-1);\n  }\n};\n\nEnemyTank.prototype.changeDirctionWhenCollision = function () {\n  this.setDirection(this.direction + Math.PI);\n};\n\nEnemyTank.prototype.initBullets = function (dir) {\n  // this.bullets.push(new Bullet(this.x,this.y,this.direction));\n  this.bullet = new Bullet(this.x, this.y, this.direction);\n};\n\nEnemyTank.prototype.bulletsRender = function (p) {\n  this.bullet.render(p);\n  if (this.bullet.x <= 0 || this.bullet.x >= this.edge_x_max || this.bullet.y >= this.edge_y_max || this.bullet.y <= 0) {\n    this.bullet.setLocation(this.x, this.y);\n    this.bullet.setDirection(this.direction);\n  }\n  this.bullet.update();\n};\n\nvar TankGame = function (p) {\n  const EDGE_MIN = 40;\n  var tank = '';\n  var enemyTank = [];\n  var enemyTankCounts = 10;\n  var score = 0;\n  var heart;\n  var scoreSound;\n  var lives;\n  var restartButton;\n  var start = true;\n\n  p.preload = function () {\n    heart = p.loadImage(require('./img/heart.png'));\n    // scoreSound = p.loadSound('../audio/score.mp3');\n  };\n  p.setup = function () {\n    lives = 3;\n    p.createCanvas(800, 640);\n    p.background(224);\n    p.fill(255, 204, 0);\n    tank = new Tank();\n    tank.setLocation(p.width / 2, p.height - 60);\n\n    for (var i = 0; i < enemyTankCounts; i++) {\n      enemyTank[i] = new EnemyTank(EDGE_MIN, p.width - EDGE_MIN, p.height - EDGE_MIN);\n      enemyTank[i].createRandom(_util2.default.randomRange(EDGE_MIN, p.width), _util2.default.randomRange(EDGE_MIN, p.height - EDGE_MIN));\n      enemyTank[i].initBullets();\n    }\n  };\n  p.draw = function () {\n    if (start) {\n      p.background(224);\n\n      // 控制tank的方向\n      controlTankDirection(p);\n      tank.render(p);\n\n      // render enemytank\n      for (var i = 0; i < enemyTank.length; i++) {\n        enemyTank[i].bulletsRender(p);\n        enemyTank[i].autoMove(p);\n      }\n      showScore(score);\n      showlives(lives);\n      addEnemyTank();\n      enemyTankGetShoted();\n      tankGetScore();\n      tankGetShoted();\n      // enemyTanksgetCollisioned();\n    } else {\n      p.clear();\n      p.textSize(36);\n      p.text(\"Your Score is: \" + score, p.width / 2, p.height / 2);\n    }\n  };\n\n  p.keyPressed = function () {\n    if (p.keyCode === p.CONTROL) {\n      tank.slotBullet();\n    }\n  };\n\n  function controlTankDirection() {\n    if (p.keyIsDown(p.LEFT_ARROW)) {\n      tank.goLeft();\n    }\n    if (p.keyIsDown(p.UP_ARROW)) {\n      tank.goUp();\n    }\n    if (p.keyIsDown(p.DOWN_ARROW)) {\n      tank.goDown();\n    }\n    if (p.keyIsDown(p.RIGHT_ARROW)) {\n      tank.goRight();\n    }\n  }\n  function showScore(score) {\n    p.textSize(24);\n    p.text(\"Score: \" + score, 30, 50);\n  }\n  function showlives(lives) {\n    switch (lives) {\n      case 3:\n        p.image(heart, 650, 30);\n        p.image(heart, 690, 30);\n        p.image(heart, 730, 30);\n        break;\n      case 2:\n        p.image(heart, 690, 30);\n        p.image(heart, 730, 30);\n        break;\n      case 1:\n        p.image(heart, 730, 30);\n        break;\n      case 0:\n        start = false;\n        break;\n    }\n  }\n  function renderEnemyTank() {}\n\n  function enemyTankGetShoted() {\n    // 判断子弹击中enemyTank\n    for (var i = 0; i < tank.bullets.length; i++) {\n      for (var j = 0; j < enemyTank.length; j++) {\n        if (tank.bullets[i].checkShot(enemyTank[j].x, enemyTank[j].y, tank.tankWidth / 2, p)) {\n          score++;\n          enemyTank.splice(j, 1);\n        }\n      }\n    }\n  }\n  function tankGetScore() {\n    for (var i = 0; i < tank.bullets.length; i++) {\n      if (tank.bullets[i].x <= 0 || tank.bullets[i].y <= 0 || tank.bullets[i].x >= p.width || tank.bullets[i] <= p.height) {\n        tank.bullets.splice(i, 1);\n      }\n    }\n  }\n  function tankGetShoted() {\n    // 判断tank是否被击中\n    for (var i = enemyTank.length - 1; i >= 0; i--) {\n      if (p.dist(enemyTank[i].bullet.x, enemyTank[i].bullet.y, tank.x, tank.y) <= tank.tankWidth / 2) {\n        lives--;\n        enemyTank[i].bullet.init(enemyTank[i].x, enemyTank[i].y, enemyTank[i].direction);\n      }\n    }\n  }\n  function addEnemyTank() {\n    if (enemyTank.length < enemyTankCounts) {\n      enemyTank.push(new EnemyTank(EDGE_MIN, p.width - EDGE_MIN, p.height - EDGE_MIN));\n      enemyTank[enemyTank.length - 1].createRandom(_util2.default.randomRange(EDGE_MIN, p.width), _util2.default.randomRange(EDGE_MIN, p.height - EDGE_MIN));\n      enemyTank[enemyTank.length - 1].initBullets();\n    }\n  }\n\n  function enemyTanksgetCollisioned() {\n    for (var i = 0, len = enemyTank.length; i < len; i++) {\n      for (var j = i + 1; j < len; j++) {\n        if (enemyTank[i].checkCollision(enemyTank[j].x, enemyTank[j].y, p)) {\n\n          enemyTank[i].changeDirctionWhenCollision();\n        }\n      }\n    }\n  }\n};\nmodule.exports = TankGame;"},"hash":"2d6ec184b06438367429b4a001b2d202"}